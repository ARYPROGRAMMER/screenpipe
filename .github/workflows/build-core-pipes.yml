name: build and release pipes

on:
  push:
    paths:
      - 'pipes/**'
    branches:
      - main

jobs:
  build-pipes:
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: setup node
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          
      - name: setup bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: 1.1.43
          
      - name: get core pipes list
        id: core-pipes
        run: |
          PIPES="memories data-table search timeline identify-speakers"
          echo "pipes=$PIPES" >> $GITHUB_OUTPUT

      - name: build pipes
        run: |
          for pipe in ${{ steps.core-pipes.outputs.pipes }}; do
            if [ -d "pipes/$pipe" ]; then
              echo "building $pipe..."
              cd pipes/$pipe
              
              bun install
              bun run build
              
              # create zip only if build succeeded and dist exists
              if [ -d "dist" ]; then
                cd dist
                zip -r ../../$pipe.zip .
                cd ../..
                echo "created zip for $pipe"
                ls -la ../../$pipe.zip
              else
                echo "warning: no dist directory found for $pipe"
              fi
              
              cd ../../
            else
              echo "warning: pipe directory $pipe not found"
            fi
          done
          
          echo "listing all zip files:"
          ls -la *.zip || echo "no zip files found"

      - name: generate release tag
        id: tag
        run: |
          SHA=$(git rev-parse --short HEAD)
          echo "tag=pipes-${SHA}" >> $GITHUB_OUTPUT

      - name: create release
        uses: softprops/action-gh-release@v1
        permissions:
          contents: write
        with:
          tag_name: ${{ steps.tag.outputs.tag }}
          name: pipes build ${{ steps.tag.outputs.tag }}
          files: |
            *.zip
          draft: false
          prerelease: false
          fail_on_unmatched_files: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
